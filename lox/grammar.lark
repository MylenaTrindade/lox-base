?start     : program

program    : declaration*

?declaration: var_def 
            | fun_def
            | class_def
            | stmt

var_def : "var" VAR ("=" expr)? ";"

fun_def    : "fun" VAR "(" fun_args ")" block
fun_args   : [VAR ( "," VAR )*]

class_def  : "class" VAR "{" class_body "}"
class_body : [fun_def*]

?stmt      : expr ";"
           | print_cmd
           | if_cmd
           | for_cmd
           | while_cmd
           | block
           | return_cmd

print_cmd  : "print" expr ";"

if_cmd     : "if" "(" expr ")" stmt ["else" stmt]

for_cmd    : "for" "(" for_init for_cond ";" for_incr ")" stmt

for_init   : var_def
           | expr ";"
           | ";"               -> empty

for_cond   : expr
           |                   -> true_expr

for_incr   : expr
           |                   -> empty

while_cmd  : "while" "(" expr ")" stmt

block      : "{" declaration* "}"

opt_expr   : expr?

return_cmd : "return" expr? ";"

// EXPRESSÃ•ES

?expr      : assign

?assign    : call "." VAR "=" assign  -> setattr
           | VAR "=" assign           -> assign
           | logic_or

?logic_or  : logic_and
           | logic_or "or" logic_and  -> or_

?logic_and : equality  
           | logic_and "and" equality -> and_

?equality  : comparison
           | equality "==" comparison -> eq
           | equality "!=" comparison -> ne

?comparison: term
           | comparison ">" term      -> gt
           | comparison "<" term      -> lt
           | comparison ">=" term     -> ge
           | comparison "<=" term     -> le

?term      : factor
           | term "+" factor          -> add
           | term "-" factor          -> sub

?factor    : unary
           | factor "*" unary         -> mul
           | factor "/" unary         -> div

?unary     : "-" unary                -> neg
           | "!" unary                -> not_
           | call

?call      : call "(" params ")"      -> call
           | call "." VAR             -> getattr
           | primary

?primary   : NUMBER
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

params     : [ expr ("," expr )* ]

EQUAL      : "="
MINUS      : "-"
NOT        : "!"
BOOL.2     : "true" | "false"
DOT.2      : "."  
VAR.1      : /[a-zA-Z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/
CLASS.2    : "class"

%ignore /\s/ | COMMENT