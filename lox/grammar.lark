?start     : program

program    : declaration*

?declaration: var_def 
            | fun_def
            //| class_def
            | stmt

var_def : "var" VAR ("=" expr)? ";"

fun_def    : "fun" VAR "(" fun_args ")" block
fun_args   : [VAR ( "," VAR )*]

?stmt      : expr ";"
           | print_cmd
           | if_cmd
           | for_cmd
           | while_cmd
           | block
           | return_cmd

print_cmd  : "print" expr ";"

if_cmd     : "if" "(" expr ")" stmt ["else" stmt]

for_cmd    : "for" "(" for_init for_cond ";" for_incr ")" stmt

for_init   : var_def
           | expr ";"
           | ";"               -> empty

for_cond   : expr
           |                   -> true_expr

for_incr   : expr
           |                   -> empty

while_cmd  : "while" "(" expr ")" stmt

block      : "{" declaration* "}"

opt_expr   : expr?

return_cmd : "return" expr? ";"

// EXPRESSÃ•ES

?expr      : expr "." VAR "=" expr   -> setattr
           | VAR "=" expr            -> assign
           | expr "." VAR            -> getattr
           | expr "(" params ")"     -> call
           | expr "+" expr           -> add
           | expr "-" expr           -> sub
           | expr "and" cmp          -> and_
           | expr "or" cmp           -> or_
           | "(" expr ")"
           | test


//assign     : VAR "=" assign
           //| test

?test      : expr "==" cmp  -> eq
           | expr "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term
           

?term      : term "*" atom   -> mul
           | term "/" atom   -> div 
           | unary

?unary     : MINUS unary   -> unary
           | NOT unary     -> unary
           | atom          

?atom      : NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" cmp ")"
           | call


call: atom "(" [expr ("," expr)*] ")"

params     : [ expr ("," expr )* ]

EQUAL      : "="
MINUS      : "-"
NOT        : "!"
BOOL.2     : "true" | "false"
DOT.2      : "."  
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/
true_expr  :                    -> true_expr
empty      :                    -> empty

%ignore /\s/ | COMMENT