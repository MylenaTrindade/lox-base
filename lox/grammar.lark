?start     : program

program    : declaration*

?declaration: var_def 
            | fun_def
            | class_def
            | stmt

var_def : VAR_KW VAR ("=" expr)? ";"

fun_def    : FUN VAR "(" fun_args ")" block
fun_args   : [VAR ( "," VAR )*]

class_def  : CLASS VAR ("<" VAR)? "{" class_body "}"
class_body : method_def*

method_def : VAR "(" fun_args ")" block

?stmt      : expr ";"
           | print_cmd
           | if_cmd
           | for_cmd
           | while_cmd
           | block
           | return_cmd

print_cmd  : PRINT expr ";"

if_cmd     : IF "(" expr ")" stmt [ELSE stmt]

for_cmd    : FOR "(" for_init for_cond ";" for_incr ")" stmt

for_init   : var_def
           | expr ";"
           | ";"               -> empty

for_cond   : expr
           |                   -> true_expr

for_incr   : expr
           |                   -> empty

while_cmd  : WHILE "(" expr ")" stmt

block      : "{" declaration* "}"

opt_expr   : expr?

return_cmd : RETURN expr? ";"

// EXPRESSÃ•ES

?expr      : assign

?assign    : call "." VAR "=" assign  -> setattr
           | VAR "=" assign           -> assign
           | logic_or

?logic_or  : logic_and
           | logic_or "or" logic_and  -> or_

?logic_and : equality  
           | logic_and "and" equality -> and_

?equality  : comparison
           | equality "==" comparison -> eq
           | equality "!=" comparison -> ne

?comparison: term
           | comparison ">" term      -> gt
           | comparison "<" term      -> lt
           | comparison ">=" term     -> ge
           | comparison "<=" term     -> le

?term      : factor
           | term "+" factor          -> add
           | term "-" factor          -> sub

?factor    : unary
           | factor "*" unary         -> mul
           | factor "/" unary         -> div

?unary     : "-" unary                -> neg
           | "!" unary                -> not_
           | call

?call      : call "(" params ")"      -> call
           | call "." VAR             -> getattr
           | SUPER "." VAR            -> super_getattr
           | primary

?primary   : NUMBER
           | BOOL
           | this_expr
           | VAR
           | STRING
           | NIL
           | "(" expr ")"

this_expr  : THIS

params     : [ expr ("," expr )* ]

EQUAL      : "="
MINUS      : "-"
NOT        : "!"
BOOL.2     : "true" | "false"
DOT.2      : "."  
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/
CLASS.2    : /\bclass\b/
FUN.2      : /\bfun\b/
RETURN.2   : /\breturn\b/
IF.2       : "if"
ELSE.2     : "else"
FOR.2      : "for"
WHILE.2    : "while"
SUPER.2    : /\bsuper\b/
THIS.2     : /\bthis\b/
PRINT.2    : /\bprint\b/
VAR_KW.2   : /\bvar\b/
VAR.1      : /[a-zA-Z_]\w*/

%ignore /\s/ | COMMENT